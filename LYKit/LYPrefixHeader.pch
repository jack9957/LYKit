//
//  LYPrefixHeader.pch
//  WaterFlow
//
//  Created by liyang on 16/9/17.
//  Copyright © 2016年 liyang. All rights reserved.
//

#ifndef LYPrefixHeader_pch
#define LYPrefixHeader_pch

// 宏和const ：
// 1、编译时刻不同：宏是预编译；const是编译时刻
// 2、宏能定义代码；const不能
// 3、多个宏对于编译会时间较长，影响开发效率；const只会编译一次，缩短编译时间
// 4、宏不会检查错误；const会检查错误
// 总结：字符串常量尽量使用const；定义代码内容使用宏

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#endif

// **************** 打印 ****************
#ifdef DEBUG
#define kLog(...) NSLog(@"\n%s 第%d行 \n%@\n\n",__func__,__LINE__,[NSString stringWithFormat:__VA_ARGS__])
#else
#    define kLog(...)
#endif

// **************** 弱引用 ****************
#define kWeakSelf(weakSelf) __weak __typeof(self) weakSelf = self;

// **************** 布局 ****************
#define kScreenBounds [UIScreen mainScreen].bounds
#define kScreenWidth [UIScreen mainScreen].bounds.size.width
#define kScreenHeight [UIScreen mainScreen].bounds.size.height

// **************** 适配 ****************
#define kHeightScaleWith6Nomal(number) (kScreenWidth/667*(number)) // 基于6的高度缩放
#define kWidthScalewWidth6Nomal(number) (kScreenHeight/375*(number))

// ******************获取通知中心******************
#define kNotificationCenter [NSNotificationCenter defaultCenter]

// ******************获取主窗口******************
#define kKeyWindow [UIApplication sharedApplication].keyWindow

// **************** 颜色 ****************
#define kLineColor [UIColor colorWithWhite:0.843 alpha:1.000] // 分割线颜色
#define kRandomColor [UIColor colorWithRed:arc4random_uniform(255)/255.0 green:arc4random_uniform(255)/255.0 blue:arc4random_uniform(255)/255.0 alpha:1] // 随机色
#define kRGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0] // rgb 三色
#define kRGBAColor(r, g, b, a) [UIColor colorWithRed:(r)/255.0 green:(r)/255.0 blue:(r)/255.0 alpha:a] // rgba三色

//// **************** 引用 ****************
//#import "UIImage+LYImage.h" // UIImage的类别
//#import "UIView+LYViewFrame.h" // 设置frame的
//#import "NSString+LYNSStringCategory.h" // NSString的分类
//#import <Masonry.h> // 自动布局的
//#import <SVProgressHUD.h> // 蒙版
//#import "LYNetworking.h" // 网络请求的
//#import <MJExtension/MJExtension.h> // 数据解析的
//#import <MJRefresh.h> // 刷新数据的



// *************************** 单例 ***************************
// .h文件
#define LYSingletonH(name) + (instancetype) shared ## name;
// .m文件
#define LYSingletonM(name) \
static id _instance = nil; \
+ (id) allocWithZone:(struct _NSZone *)zone \
{ \
static dispatch_once_t onceToken; \
dispatch_once(&onceToken, ^{ \
_instance = [super allocWithZone:zone]; \
}); \
return _instance; \
} \
+ (instancetype) shared ## name \
{ \
static dispatch_once_t onceToken; \
dispatch_once(&onceToken, ^{ \
_instance = [[self alloc] init]; \
}); \
return _instance; \
} \
- (id) copyWithZone:(NSZone *)zone \
{ \
return _instance; \
}

// 判断当前的iPhone设备/系统版本
//************************ 判断是否为iPhone ************************
#define kIS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)

//************************ 判断是否为iPad ************************
#define kIS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)

//************************ 判断是否为iPod ************************
#define kIS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@"iPod touch"])

// 判断是否为 iPhone 5SE/5c/5s/5
#define kiPhone5 [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 568.0f

// 判断是否为iPhone 6/6s/7
#define kiPhone6 [[UIScreen mainScreen] bounds].size.width == 375.0f && [[UIScreen mainScreen] bounds].size.height == 667.0f

// 判断是否为iPhone 6Plus/6sPlus/7Plus
#define kiPhone6P [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f

// 获取系统版本
#define kiOS_SYSTEM_VERSION [[UIDevice currentDevice] systemVersion]


// 判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif

// 沙盒目录文件
//获取temp
#define kPathTemp NSTemporaryDirectory()

//获取沙盒 Document
#define kPathDocument [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]

//获取沙盒 Cache
#define kPathCache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]


#endif /* LYPrefixHeader_pch */
